spring:
  security:
    oauth2:
      resourceserver:
        jwt:
          #          issuer-uri: ${KEYCLOAK_SERVER_URL}/realms/${KEYCLOAK_REALM}
          #          jwk-set-uri: ${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs
          issuer-uri: https://accounts.google.com

  servlet:
    multipart:
      enabled: true
      max-file-size: 200MB
      max-request-size: 200MB

  flyway:
    enabled: true # Flyway 마이그레이션을 활성화합니다.
    baselineOnMigrate: false # 기존 스키마에 베이스라인을 설정하여 마이그레이션을 시작할 수 있게 합니다.
    validateOnMigrate: true # 마이그레이션 실행 전에 스키마가 예상대로 되어 있는지 검증합니다.
    locations: classpath:db/migration # 마이그레이션 파일의 위치를 지정합니다.

  datasource:
    url: ${DB_URL}
    username: ${DB_USER}
    password: ${DB_PASSWORD}
    driver-class-name: oracle.jdbc.OracleDriver
    hikari:
      maximum-pool-size: ${DB_MAX_POOL_SIZE:20} # keep it as small as possible for better performance.
      data-source-properties:
        ApplicationName: ${spring.application.name} # show application's name when using pg_stat_activity
        stringtype: unspecified
        reWriteBatchedInserts: true

  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: validate
    show-sql: true
    properties:
      hibernate:
        "[format_sql]": true
    database-platform: org.hibernate.dialect.OracleDialect

server:
  error:
    whitelabel:
      enabled: false # disable default whitelabel error page.
  shutdown: graceful


keycloak:
  auth-server-url: ${KEYCLOAK_SERVER_URL}
  realm: ${KEYCLOAK_REALM}
  resource: ${KEYCLOAK_CLIENT_ID}
  credentials:
    secret: ${KEYCLOAK_CLIENT_SECRET}
  use-resource-role-mappings: true
  principal-attribute: preferred_username

jwt:
  auth:
    converter:
      resource-id: ${KEYCLOAK_CLIENT_ID}
      principle-attribute: preferred_username

cloud:
  aws:
    s3:
      bucket: ${S3_BUCKET}
    stack.auto: false
    region.static: ap-northeast-2
    credentials:
      accessKey: ${S3_ACCESS_KEY}
      secretKey: ${S3_SECRET_KEY}